{"version":3,"sources":["logo.svg","components/Compare.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Compare","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","listOne","listTwo","result","listOneArray","listTwoArray","resultArray","options","buttonColor","push","id","option","selected","button","react_default","a","createElement","key","type","className","onClick","intersection","disjunctiveUnion","_this2","length","filter","value","indexOf","setState","join","_this3","unique1","o","unique2","concat","event","preventDefault","target","split","el","console","log","_this4","map","renderOption","resetResult","_this5","onChange","updateListOne","rows","updateListTwo","readOnly","renderOptions","reset","Component","App","components_Compare","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d737f18.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{Component} from 'react';\nimport $ from 'jquery';\n\nclass Compare extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            listOne : \"\",\n            listTwo : \"\",\n            result : \"\"\n        }\n        this.listOneArray = [];\n        this.listTwoArray = [];\n        this.resultArray = [];\n        this.options = [];\n        this.buttonColor = 'btn btn-info';\n        this.options.push({id:\"1\", option:'Intersection',selected:false,button:<button id='button1' key=\"1\" type='button' className={this.buttonColor} onClick={() => this.intersection()}>Common elements</button>});\n        this.options.push({id:\"2\", option:'Disjunctive_Union',selected:false,button:<button id='button2' key=\"2\" type='button' className={this.buttonColor} onClick={() => this.disjunctiveUnion()}>Uncommon elements</button>});\n    }\n    intersection(){\n        if(this.listOneArray.length<this.listTwoArray.length){\n            this.resultArray = this.listOneArray.filter(value => -1 !== this.listTwoArray.indexOf(value))\n        }\n        else{\n            this.resultArray = this.listTwoArray.filter(value => -1 !== this.listOneArray.indexOf(value))\n        }\n        this.setState({\n            result : this.resultArray.join(\"\\n\")\n        })\n    }\n    disjunctiveUnion(){\n        let unique1 = this.listOneArray.filter((o) => this.listTwoArray.indexOf(o) === -1);\n        let unique2 = this.listTwoArray.filter((o) => this.listOneArray.indexOf(o) === -1);\n        this.resultArray = unique1.concat(unique2);\n        this.setState({\n            result : this.resultArray.join(\"\\n\")\n        })\n    }\n    updateListOne(event) {\n        event.preventDefault();\n        this.setState({\n            listOne : event.target.value,\n        });\n        this.listOneArray = event.target.value.split(\"\\n\");\n        this.listOneArray = this.listOneArray.filter(function (el) {\n            return el != \"\";\n        });\n        console.log(this.listOneArray.length)\n    }\n    updateListTwo(event) {\n        event.preventDefault();\n        this.setState({\n            listTwo : event.target.value,\n        });\n        this.listTwoArray = event.target.value.split(\"\\n\");\n        this.listTwoArray = this.listTwoArray.filter(function (el) {\n            return el != \"\";\n        });\n        console.log(this.listTwoArray.length)\n    }\n    renderOption(option){\n        return <div className=\"row mb-4\">\n                    <div className=\"col text-center\">\n                        {option.button}\n                    </div>\n                </div>\n    }\n    renderOptions(){\n        return (\n            this.options.map(option => {return this.renderOption(option);\n        }));\n    }\n    resetResult(){\n        this.resultArray = []\n        this.setState({\n            result: \"\"\n        })\n    }\n    reset(){\n        this.listOneArray = []\n        this.listTwoArray = []\n        this.setState({\n            listOne: \"\",\n            listTwo: \"\"\n        })\n        this.resetResult()\n    }\n    render(){\n        return <form className=\"row\">\n                     <div className=\"form-group col-lg-4 col-md-4 col-sm-12\">\n                        <h4 className=\"text-center col-lg-12 col-md-12 col-sm-12\">List 1</h4>\n                        <textarea value={this.state.listOne} onChange={(event) => this.updateListOne(event)} className=\"form-control col-lg-12 col-md-12 col-sm-12\" rows=\"20\"></textarea>\n                    </div>\n                    <div className=\"form-group col-lg-4 col-md-4 col-sm-12\">\n                        <h4 className=\"text-center col-lg-12 col-md-12 col-sm-12\">List 2</h4>\n                        <textarea value={this.state.listTwo} onChange={(event) => this.updateListTwo(event)} className=\"form-control col-lg-12 col-md-12 col-sm-12\" rows=\"20\"></textarea>\n                    </div>\n                    <div className=\"form-group col-lg-4 col-md-4 col-sm-12\">\n                        <h4 className=\"text-center col-lg-12 col-md-12 col-sm-12\">Result</h4>\n                        <textarea value={this.state.result} className=\"form-control col-lg-12 col-md-12 col-sm-12\" rows=\"20\" readOnly></textarea>\n                    </div>\n                    <div className=\"form-group col-lg-12 col-md-12 col-sm-12\">\n                        <h4 className=\"text-center col-lg-12 col-md-12 col-sm-12 mb-4\">Options</h4>\n                        {this.renderOptions()}\n                        <div className=\"row mb-4\"><div className=\"col text-center\"><button type='button' className='btn btn-success' onClick={() => this.reset()}>RESET</button></div></div>\n                    </div>\n        </form>\n    }\n}\n\nexport default Compare;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Compare from './components/Compare'\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h2 className=\"text-center\">Compare Lists</h2>\n        <Compare />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}